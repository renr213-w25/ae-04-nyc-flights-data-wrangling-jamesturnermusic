---
title: "AE 04: NYC flights + data wrangling"
author: "James Turner"
date: today
format: html
---

```{r}
#| label: load-packages
#| message: false

library(tidyverse)
library(nycflights13)
```



## Exercise 1

**Your turn:** Fill in the blanks:

The `flights` data frame has *337,776* rows. Each row represents a *Flight*.



```{r}
glimpse(flights)
```



## Exercise 2

**Your turn:** What are the names of the variables in `flights`.



```{r}
#| label: column-names

colnames(flights)
```



## Exercise 3 - `select()`

-   Make a data frame that only contains the variables `dep_delay` and `arr_delay`.



```{r}
#| label: select-vars

delays <- flights %>% 
  select(c(dep_delay, arr_delay))
delays
```



-   Make a data frame that keeps every variable except `dep_delay`.



```{r}
#| label: exclude-vars

depart_on_time <- flights %>% 
  select(-dep_delay)
depart_on_time
```



-   Make a data frame that includes all variables between `year` through `dep_delay` (inclusive). These are all variables that provide information about the departure of each flight.



```{r}
#| label: include-range

departures <- flights %>% 
  select(c(year:dep_delay))
departures
```



-   Use the `select` helper `contains()` to make a data frame that includes the variables associated with the arrival, i.e., contains the string `"arr\_"` in the name.



```{r}
#| label: arr-vars

fli_arrival <- flights %>% 
  select(contains("arr_"))
fli_arrival
```



## Exercise 4 - `slice()`

-   Display the first five rows of the `flights` data frame.



```{r}
#| label: slice

flights |>
  slice(1:5)
```



-   Display the last two rows of the `flights` data frame.



```{r}
#| label: last-two

flights |>
  slice(336775:336776)
```



## Exercise 5 - `arrange()`

-   Let's arrange the data by departure delay, so the flights with the shortest departure delays will be at the top of the data frame.



```{r}
#| label: arrange-delays

arr_dep_del_early <- flights |>
  arrange(dep_delay)
arr_dep_del_early
```



-   Question: What does it mean for the `dep_delay` to have a negative value?

    A negative value tells us that the flight departed early with the value behind the negative telling us how many minutes early it departed before its scheduled departure time.

<!-- -->

-   Arrange the data by descending departure delay, so the flights with the longest departure delays will be at the top.



```{r}
#| label: arrange-delays-desc

arr_dep_del_late <- flights |>
  arrange(-dep_delay)
arr_dep_del_late
```



-   **Your turn:** Create a data frame that only includes the plane tail number (`tailnum`), carrier (`carrier`), and departure delay for the flight with the longest departure delay. What is the plane tail number (`tailnum`) for this flight? **The plane tail number is N38HA**



```{r}
#| label: longest-delay

tailnum_delay <- arr_dep_del_late |>
  select(c(tailnum, carrier, dep_delay)) |> 
  slice(1)
tailnum_delay
```



## Exercise 6 - `filter()`

-   Filter for all rows where the destination airport is RDU.



```{r}
#| label: rdu

flights_RDU <- flights |>
  filter(dest == "RDU")
flights_RDU
```



-   Filter for all rows where the destination airport is RDU and the arrival delay is less than 0.



```{r}
#| label: rdu-ontime

flights_RDU |>
  filter(arr_delay <= 0)
```



-   **Your turn:** Describe what the code is doing in words.

The code is taking the flights dataframe and then filtering it to show us the flights to RDU and GSO airports as the destination only and which either arrived OR departed "early" compared to their scheduled arrival or departure time respectively.



```{r}
#| label: nc-early

nc_early <- flights |>
  filter(
    dest %in% c("RDU", "GSO"),
    arr_delay < 0 | dep_delay < 0
  )
nc_early
```



**Hint:** Logical operators in R:

| operator      | definition                                               |
|:--------------|:---------------------------------------------------------|
| `<`           | is less than?                                            |
| `<=`          | is less than or equal to?                                |
| `>`           | is greater than?                                         |
| `>=`          | is greater than or equal to?                             |
| `==`          | is exactly equal to?                                     |
| `!=`          | is not equal to?                                         |
| `x & y`       | is x AND y?                                              |
| `x \| y`      | is x OR y?                                               |
| `is.na(x)`    | is x NA?                                                 |
| `!is.na(x)`   | is x not NA?                                             |
| `x %in% y`    | is x in y?                                               |
| `!(x %in% y)` | is x not in y?                                           |
| `!x`          | is not x? (only makes sense if `x` is `TRUE` or `FALSE`) |

## Exercise 7 - `count()`

-   Create a frequency table of the destination locations for flights from New York.



```{r}
#| label: count-dest

count_dest <- flights |>
  count(origin, dest, sort = TRUE)

count_dest
```



-   In which month was there the fewest number of flights? How many flights were there in that month?

    ANSWER: November had the fewest flights of any month at only 27268



```{r}
#| label: count-month

count_month <- flights |>
  count(month, sort = TRUE)
count_month
```



-   **Your turn:** On which date (month + day) was there the largest number of flights? How many flights were there on that day?

    ANSWER: November 27th had to most flights of any day in the year with 1014 flights.



```{r}
#| label: count-date

count_date <- flights |>
  count(month, day, sort = TRUE)
count_date
```



## Exercise 8 - `mutate()`

-   Convert `air_time` (minutes in the air) to hours and then create a new variable, `mph`, the miles per hour of the flight.



```{r}
#| label: calculate-mph

calculate_mph <- flights |>
  mutate(
    air_time_hrs = air_time / 60,
    mph = distance / air_time_hrs,
    .before = 1
    )
calculate_mph
```



-   **Your turn:** First, count the number of flights each month, and then calculate the proportion of flights in each month. What proportion of flights take place in July?

    **ANSWER:** \~8.74% of all flights took place in July



```{r}
#| label: months-prop

months_prop <- flights |>
  count(month) |>
  mutate(proportion = n / sum(n))
months_prop
```



-   Create a new variable, `rdu_bound`, which indicates whether the flight is to RDU or not. Then, for each departure airport (`origin`), calculate what proportion of flights originating from that airport are to RDU.

ANSWER:



```{r}
#| label: rdu-origin-prop

rdu_origin_prop <- flights |>
  filter(dest == "RDU") |>
  count(origin) |>
  mutate(
    rdu_bound = n / sum(n),
    )
rdu_origin_prop
```



## Exercise 9 - `summarize()`

-   Find mean arrival delay for all flights.



```{r}
#| label: find-arrival-delay

mean_arrival_delay <- flights |>
  mutate(
    mean_arr_del = mean(arr_delay, na.rm = TRUE),
    .before = 1
    )
mean_arrival_delay
```



## Exercise 10 - `group_by()`

-   Find mean arrival delay for for each month.



```{r}
#| label: mean-arr-delay-month

mean_arrival_delay_month <- flights |>
  group_by(month) |>
  summarize(
    mean_arr_del = mean(arr_delay, na.rm = TRUE)
    )
mean_arrival_delay_month
```



-   **Your turn:** What is the median departure delay for each airports around NYC (`origin`)? Which airport has the shortest median departure delay?

ANSWER: LaGuardia Airport has the shortest median departure delay with the median flight actually leaving 3 minutes early.



```{r}
#| label: median-dep-dely-origin

median_dep_delay_month <- flights |>
  group_by(origin) |>
  summarize(
    median_dep_delay = median(dep_delay, na.rm = TRUE)
    )
median_dep_delay_month
```



# Additional Practice

Try these on your own, either in class if you finish early, or after class.

1.  Create a new dataset that only contains flights that do not have a missing departure time. Include the columns `year`, `month`, `day`, `dep_time`, `dep_delay`, and `dep_delay_hours` (the departure delay in hours). *Hint: Note you may need to use `mutate()` to make one or more of these variables.*



```{r}
#| label: add-practice-1

flights_w_dep_time <- flights |>
  filter(dep_time = TRUE) |>
  mutate(
    dep_delay_hours = dep_delay / 60
  ) |>
  select(year,
         month,
         day,
         dep_time,
         dep_delay,
         dep_delay_hours
         )
flights_w_dep_time
```



2.  For each airplane (uniquely identified by `tailnum`), use a `group_by()` paired with `summarize()` to find the sample size, mean, and standard deviation of flight distances. Then include only the top 5 and bottom 5 airplanes in terms of mean distance traveled per flight in the final data frame.



```{r}
#| label: add-practice-2

airplane_details <- flights |>
  group_by(tailnum) |>
  summarize(
    samp_size = n(),
    mean_distance = mean(distance),
    sd_distance = sd(distance), .groups = "drop"
  ) |>
  arrange(mean_distance)

rbind(head(airplane_details, 5), tail(airplane_details, 5))
```

